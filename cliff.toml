# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        {{ previous.commit_id | truncate(length=7, end="") }}...\
            {{ commit_id | truncate(length=7, end="") }}
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7, end="") }})\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
commit_preprocessors = [
    { pattern = '</?([a-zA-Z]+)[^>]*>', replace = "$1"}
]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits, (?i) makes pattern case insensitive
commit_parsers = [
    { message = "^.github", group = "CI/CD" },
    { message = "^/", group = "CI/CD" },
    { message = "^(?i)README", group = "README" },
    { message = "^(?i)SEO", group = "SEO" },
    { message = "^(?i)About-us", group = "About Us" },
    { message = "^(?i)Careers", group = "Careers" },
    { message = "^(?i)Contact", group = "Contact" },
    { message = "^(?i)Content", group = "Content" },
    { message = "^(?i)Newest-video", group = "Video" },
    { message = "^(?i)Pre-commit", group = "Pre-commit" },
    { message = "^.lycheeignore", group = "Pre-commit" },
    { message = "^.markdown.yaml", group = "Pre-commit" },
    { message = "^.pre-commit-config.yaml", group = "Pre-commit" },
    { message = "^(?i)Event", group = "Events" },
    { message = "^(?i)Dasharo-terms-of-service.md", group = "Terms of Service" },
    { message = "^(?i)Return-refund-policy", group = "Terms of Service" },
    { message = "^(?i)Why-fight-for-freedom", group = "Why we fight for freedom" },
    { message = "^(?i)Themes", group = "Theme" },
    { message = "^(?i)Layouts", group = "Theme" },
    { message = "^3mdeb/layouts", group = "Theme" },
    { message = "^3mbed/layouts", group = "Theme" },
    { message = "^(?i)Partials", group = "Theme" },
    { message = "^(?i)Scripts", group = "Scripts" },
    { message = "^(?i)fix", group = "Bug Fixes" },
    { message = "^[Cc]onfig", group = "Website Configuration" },
    { message = "^(?i)Menus", group = "Website Configuration" },
    { message = "^(?i)Params", group = "Website Configuration" },
    { message = "^(?i)Sitemap", group = "Website Configuration" },
    { message = "^(?i)Static/.htaccess", group = "Website Configuration" },
    { message = "^(?i)Static/htaccess", group = "Website Configuration" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
